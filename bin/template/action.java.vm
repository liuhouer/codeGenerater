#set ($bean = $modelName) 
#set ($beanlen = $bean.length())
#set ($Bean = $bean.substring(0,1).toUpperCase()+$bean.substring(1,$beanlen)) 

package ${suffix}.${domain}.action;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;

import ${suffix}.${domain}.manager.${Bean}Manager;
import ${suffix}.${domain}.model.$Bean;
import ${suffix}.${domain}.query.${Bean}Query;
import ${suffix}.${domain}.query.condition.${Bean}QueryCondition;
import ${suffix}.${domain}.utils.MyConstant;
import ${suffix}.${domain}.utils.PageView;
import ${suffix}.${domain}.utils.QueryResult;

import org.springframework.beans.factory.annotation.Autowired;
import java.util.LinkedHashMap;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;


/**
 * @author bruce
 * @date ${date}
 * @email zhangyang226@gmail.com
 * @site http://blog.northpark.cn | http://northpark.cn | orginazation https://github.com/jellyband
 * 
 */
@Controller
@RequestMapping("/${bean.toLowerCase()}Action")
@SessionAttributes({ "list", "${bean.toLowerCase()}" })
public class ${Bean}Action {

 private final String LIST_ACTION = "redirect:/${bean.toLowerCase()}Action/findAll";
 @Autowired	
 private ${Bean}Manager ${bean.toLowerCase()}Manager;
 @Autowired	
 private ${Bean}Query ${bean.toLowerCase()}Query;

	
	@RequestMapping("/toAdd")
	public String toAdd(ModelMap map) {
		//List<${Bean}> Pidlist = ${Bean.toLowerCase()}Manager.findAll();
		//map.addAttribute("Pidlist",Pidlist);
		return "admin/${Bean.toLowerCase()}/${Bean.toLowerCase()}Add";
	}
	
	@RequestMapping("/toEdit")
	public String toEdit(HttpServletRequest request, @RequestParam("id") Integer id,ModelMap map) {
		//String id = request.getParameter("id");
		//List<${Bean}> Pidlist = ${Bean.toLowerCase()}Manager.findAll();
		//map.addAttribute("Pidlist",Pidlist);
		if(null!=id && 0!=id){
			${Bean} model = ${Bean.toLowerCase()}Manager.find${Bean}(id);
			map.put("model", model);
		}
		return "admin/${Bean.toLowerCase()}/${Bean.toLowerCase()}Edit";
	}
	
	@RequestMapping("/remove")
	public String remove(@RequestParam("id") Integer id) {
		this.${Bean.toLowerCase()}Manager.del${Bean}(id);
		return LIST_ACTION;
	}
	
	@RequestMapping("/removes")
	public String removes(@RequestParam("ids") String ids) {
		String[] str = ids.split(",");
		for(String s :str){
			this.${Bean.toLowerCase()}Manager.del${Bean}(Integer.parseInt(s));
		}
		return LIST_ACTION;
	}
	
	@RequestMapping("/update")
	public String update(${Bean} model) {
		this.${Bean.toLowerCase()}Manager.update${Bean}(model);
		return LIST_ACTION;
	}
	

	@RequestMapping("/add${Bean}")
	public String add${Bean}(${Bean} ${bean.toLowerCase()}) {
		this.${bean.toLowerCase()}Manager.add${Bean}(${bean.toLowerCase()});
		return LIST_ACTION;
	}

	@RequestMapping("/find${Bean}")
	private String find${Bean}(@RequestParam("id") Integer id, ModelMap map) {
		${Bean} ${bean.toLowerCase()} = this.${bean.toLowerCase()}Manager.find${Bean}(id);
		map.addAttribute("${bean.toLowerCase()}", ${bean.toLowerCase()});
		return "findresult";
	}

	@RequestMapping("/del${Bean}")
	public String del${Bean}(@RequestParam("id") Integer id) {
		this.${bean.toLowerCase()}Manager.del${Bean}(id);
		return LIST_ACTION;
	}

	@RequestMapping("/update${Bean}")
	public String update${Bean}(@RequestParam("id") Integer id) {
		${Bean} ${bean.toLowerCase()} = this.${bean.toLowerCase()}Manager.find${Bean}(id);
		this.${bean.toLowerCase()}Manager.update${Bean}(${bean.toLowerCase()});
		return LIST_ACTION;
	}

	@RequestMapping(value="/findAll")
	public String findAll(ModelMap map,${Bean}QueryCondition condition,HttpServletRequest request,
			HttpServletResponse response, HttpSession session) {
		String whereSql = ${Bean.toLowerCase()}Query.getSql(condition);
		
		PageView<${Bean}> pageView = getPageView(null, whereSql);
		

		LinkedHashMap<String, String> order = new LinkedHashMap<String, String>();
		order.put("createtime", "desc");

		QueryResult<${Bean}> qrs = this.${Bean.toLowerCase()}Manager.findByCondition(pageView,
				whereSql, order);
		List<${Bean}> list = qrs.getResultlist();
		map.addAttribute("pageView", pageView);
		map.put("condition", condition);
		map.addAttribute("list", list);
		map.addAttribute("actionUrl","${Bean.toLowerCase()}Action/findAll" );

		return "admin/${Bean.toLowerCase()}/${Bean.toLowerCase()}List";
	}

	private PageView<${Bean}> getPageView(String page,
			String whereSql) {
		PageView<${Bean}> pageView = new PageView<${Bean}>();
		int currentpage = 0; //当前页码
		int pages = 0; //总页数
		int n = this.${Bean.toLowerCase()}Manager.countHql(new ${Bean}(), whereSql);;
		int maxresult = MyConstant.MAXRESULT; /** 每页显示记录数**/
        if(n % maxresult==0)
       {
          pages = n / maxresult ;
       }else{
          pages = n / maxresult + 1;
       }
        if(StringUtils.isEmpty(page)){
           currentpage = 0;
        }else{
           currentpage = Integer.parseInt(page);
           
           if(currentpage<0)
           {
              currentpage = 0;
           }
           if(currentpage>=pages)
           {
              currentpage = pages - 1;
           }
        }
		int startindex = currentpage*maxresult;
		int endindex = startindex+maxresult-1;
		pageView.setStartindex(startindex);
		pageView.setEndindex(endindex);
		pageView.setTotalrecord(n);
		pageView.setCurrentpage(currentpage);
		pageView.setTotalpage(pages);
		return pageView;
	}

}
